//枚举
enum SomeEnumeration {
    case north
    case south
    case east
    case west
}

enum Planet {
    case mercury,venus,earth,mars,jupiter,saturn,uranus,neptune
}

var directionToHead = SomeEnumeration.west
//print(directionToHead)
directionToHead = .north
//print(directionToHead)

directionToHead = .south
switch directionToHead{
case .north:
    print("Lots of planets have a north")
case .south:
    print("Watch out for penguins")
case .east:
    print("Where the sun rises")
case .west:
    print("Where the skies are blue")
}

let somePlanet = Planet.earth
switch somePlanet {
case .earth:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
}

enum Beverage: CaseIterable{
    case coffee,tea,juice
}
let numberOfChoices = Beverage.allCases.count
//print(numberOfChoices)

for beverage in Beverage.allCases{
    print(beverage)
}

enum BarCode {
    case upc(Int,Int,Int,Int)
    case qrCode(String)
}
var productBarcode = BarCode.upc(8, 85909, 51226, 3)
//productBarcode = .qrCode("SAJFKJDSLKFJLKSDJALKF")

switch productBarcode {
case .upc(let numberSystem, let manufacturer, let product, let check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case .qrCode(let productCode):
    print("QR code: \(productCode).")
}
// 打印“QR code: ABCDEFGHIJKLMNOP.”
enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}

//print(ASCIIControlCharacter.tab)
//print(ASCIIControlCharacter.lineFeed)
//print(ASCIIControlCharacter.carriageReturn)
enum Planet2: Int{
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

print(Planet2.mercury)
let possiblePlanet = Planet2(rawValue: 7)
// possiblePlanet 类型为 Planet? 值为 Planet.uranus

let positionToFind = 11
if let somePlanet=Planet2(rawValue: positionToFind) {
    switch somePlanet {
    case .earth:
        print("Mostley harmless")
    default:
        print("Not a safe place for humans")
    }
}else{
    print("There isn't a planet at position \(positionToFind)")
}
print("------------------------")

indirect enum ArithmeticExpression{
    case number(Int)
    case addition(ArithmeticExpression,ArithmeticExpression)
    case multiplication(ArithmeticExpression,ArithmeticExpression)
}

func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left)+evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left)*evaluate(right)
    }
}